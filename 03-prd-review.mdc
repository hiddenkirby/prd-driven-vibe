---
description: User has an existing implementation plan and wants to check before development handoff.
globs:
alwaysApply: false
---

# PRD Review & Implementation Readiness Check

## ðŸŽ¯ Goal: Convert implementation plans to executable format before development handoff


## Review Protocol
1. **Read PRD** - Understand scope and requirements
2. **Verify Files** - Use codebase_search to confirm all mentioned paths exist
3. **Convert Format** - ALWAYS restructure into executable checklist format, 3 tasks per phase maximum, each phase with a git commit
4. **Rate Completeness** - Score /10 with specific gaps identified
5. **User Approval** - Wait for "approved" before proceeding

### **Self-Review Questions**:
1. Could a new developer hire with no context follow this documentation and succeed?
2. Are all technical claims verifiable in the codebase?
3. Have I avoided marketing language in favor of technical accuracy?
4. Do the examples match the actual API/UI behavior?
5. Are limitations and current boundaries clearly stated?


## ðŸ“‹ MANDATORY: Convert to This Exact Format

**ALWAYS restructure implementation plans into this format:**

```markdown
# [Title] - Executable Implementation Plan

**Date**: [Date]
**Type**: [Backend/Frontend/Tech Debt/Full Stack]
**Priority**: [High/Medium/Low]
**Status**: [Planning/In Progress/Complete]

## ðŸŽ¯ Summary
[1-2 sentence summary of what's being implemented]

## Relevant Files
- `path/to/file.swift` - Brief description of file's purpose
- `path/to/file.py` - Brief description of file's purpose

## Tasks

### [Phase] (1.0) - [Category]
- [ ] 1.0 `git commit -m "[Layer]: [Brief description of goal for this phase]"`
- [ ] 1.1 [Specific task description]
- [ ] 1.2 [Specific task description]
- [ ] 1.3 [Specific task description]
- [ ] 1.4 [Specific QA validation command/test]
- [ ] 1.5 [Pause for user confirmation before next phase]

### [Phase] (2.0) - [Category]
- [ ] 2.0 `git commit -m "[Layer]: [Brief description of goal for this phase]"`
- [ ] 2.1 [Specific task description]
- [ ] 2.2 [Specific task description]
- [ ] 2.3 [Specific task description]
- [ ] 2.4 [Specific QA validation command/test]
- [ ] 2.5 [Pause for user confirmation before next phase]

## Phase Rules
- **3 tasks maximum** per phase (X.1, X.2, X.3)
- **Git commit** placeholder for each phase (X.0)

## Production Safety Checklist
- [ ] **Verify Paths** - All file locations confirmed via codebase search
- [ ] **Real Data Only** - Actual Supabase tables, Railway endpoints
- [ ] **No Placeholders** - All code must be production-ready
- [ ] **Error Handling** - Include proper validation and error states
- [ ] **User Experience** - No breaking changes to existing functionality
- [ ] **Performance** - Minimal impact on app/API performance

## AI Instructions
1. **ALWAYS Convert Format** - Never approve a plan without converting to the exact format above
2. **Verify All Paths** - Use codebase_search to confirm every file mentioned
3. **Layer Classification** - Properly categorize tasks by execution layer
4. **Production Safety** - Ensure no mocks, stubs, truncation, dummy, fallback, or placeholder code
5. **Simplicity Check** - Use Apple platform APIs where possible, avoid overengineering

## ðŸ“š Reference Architecture
- **Frontend**: 
- **Backend**:  
- **API Contracts**: 
- **MCP for Production Database**: 
- **Production API**: 